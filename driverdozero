metadata {
    definition(name: "Driver do Zero", namespace: "jorge", author: "Jorge Palmeira") {
        capability "Switch"
        capability "Thermostat"
	capability "ThermostatMode"
	capability "ThermostatFanMode"
	capability "ThermostatCoolingSetpoint"
        capability "ThermostatSetpoint"
        capability "TemperatureMeasurement"
    }
}
preferences {
	input name: "TasmotaIP", title:"local IP address of Tasmota IR", type: "string", required: true
	input name: "username", title:"Username of Tasmota IR", type: "string"
	input name: "password", title:"Password of Tasmota IR", type: "string"
	input name: "ACvendor", title:"Vendor string of Air Conditioner", options: ["SAMSUNG_AC", "LG", "LG2", "COOLIX", "DAIKIN", "KELVINATOR", "MITSUBISHI_AC", "GREE", "ARGO", "TROTEC", "TOSHIBA_AC", "FUJITSU_AC", "MIDEA", "HAIER_AC", "HITACHI_AC", "HAIER_AC_YRW02", "WHIRLPOOL_AC", "ELECTRA_AC", "PANASONIC_AC", "DAIKIN2", "VESTEL_AC", "TECO", "TCL112AC", "MITSUBISHI_HEAVY_88", "MITSUBISHI_HEAVY_152", "DAIKIN216", "SHARP_AC", "GOODWEATHER", "DAIKIN160", "NEOCLIMA", "DAIKIN176", "DAIKIN128"], type: "enum", required: true, defaultValue: "SAMSUNG_AC"
	input name: "offThreshold", title:"Off Threshold Power (W)", type: "number", required: true, defaultValue: 3.9
	input name: "onThreshold", title:"On Threshold Power (W)", type: "number", required: true, defaultValue: 4
}

def parse(String description) {
}


def installed() {
    initialize()
}

def updated() {
    initialize()
}

def initialize() {

}

def on() {
    sendEvent(name: "switch", value: "on")
    sendTasmota('IRhvac {"Vendor":"'+VENDOR+'", "Power":"On","Mode":"Cool","FanSpeed":"'+FANMODE+'","Temp":"'+device.currentValue("coolingSetpoint")+'"}')
}

def off() {
    sendEvent(name: "switch", value: "off")
    sendTasmota('IRhvac {"Vendor":"'+VENDOR+'", "Power":"Off"}')
}
def cool() {
    sendEvent(name: "thermostatMode", value: "cool")
    sendTasmota('IRhvac {"Vendor":"'+VENDOR+'", "Power":"On","Mode":"Cool","FanSpeed":"'+FANMODE+'","Temp":"'+device.currentValue("coolingSetpoint")+'"}')
}

def heat() {
    sendEvent(name: "thermostatMode", value: "heat")
    sendTasmota('IRhvac {"Vendor":"'+VENDOR+'", "Power":"On","Mode":"Heat","FanSpeed":"'+FANMODE+'","Temp":"'+device.currentValue("coolingSetpoint")+'"}')
}

def auto() {
    sendEvent(name: "thermostatMode", value: "auto")
    sendTasmota('IRhvac {"Vendor":"'+VENDOR+'", "Power":"On","Mode":"Auto","FanSpeed":"'+FANMODE+'","Temp":"'+device.currentValue("coolingSetpoint")+'"}')
}

def emergencyHeat() {
    setThermostatMode("emergency heat")
}


def fanAuto() {
    sendEvent(name: "thermostatFanMode", value: "auto", displayed: true)
    sendTasmota('IRhvac {"Vendor":"'+VENDOR+'", "Power":"On","Mode":"Auto","FanSpeed":"Auto","Temp":"'+device.currentValue("coolingSetpoint")+'"}')
}

def fanCirculate() {
    sendEvent(name: "thermostatFanMode", value: "min", displayed: true)
    sendTasmota('IRhvac {"Vendor":"'+VENDOR+'", "Power":"On","Mode":"Auto","FanSpeed":"Low","Temp":"'+device.currentValue("coolingSetpoint")+'"}')
}

def fanOn() {
    sendEvent(name: "thermostatFanMode", value: "max", displayed: true)
    sendTasmota('IRhvac {"Vendor":"'+VENDOR+'", "Power":"On","Mode":"Auto","FanSpeed":"Max","Temp":"'+device.currentValue("coolingSetpoint")+'"}')
}
//qualquer coisa apaga aqui
def setCoolingSetpoint(temperature){
	if (state.switch=="on") {
		sendTasmota('IRhvac {"Vendor":"'+VENDOR+'", "Power":"On","Mode":"Cool","FanSpeed":"'+FANMODE+'","Temp":"'+temperature+'"}')
		sendEvent(name: "thermostatMode", value: "cool", displayed: true)
	}
	sendEvent(name: "coolingSetpoint", value: temperature as int, unit: "C", displayed: true)
}

def setThermostatMode(mode) {
    //"heat", "cool", "emergency heat", "auto", "off"
	//if (mode!="cool" && mode!="auto" && mode!="fanOnly" && mode!="dry") {
    if (mode!="cool" && mode!="auto" && mode!="heat" && mode!="emergency heat" && mode!="dry") {
		sendEvent(name: "thermostatMode", value: "auto", displayed: true)
		return
	}
	if (state.switch=="on") {
		sendTasmota('IRhvac {"Vendor":"'+VENDOR+'", "Power":"On","Mode":"'+mode+'","FanSpeed":"'+FANMODE+'","Temp":"'+device.currentValue("coolingSetpoint")+'"}')
	}
	sendEvent(name: "thermostatMode", value: mode, displayed: true)
}

def setThermostatFanMode(mode) {
    //"auto", "circulate", "on"
	//if (mode!="low" && mode!="medium" && mode!="high" && mode!="auto") {
    if (mode!="auto" && mode!="circulate" && mode!="on") {
		sendEvent(name: "thermostatFanMode", value: "auto", displayed: true)
	} else {
		sendEvent(name: "thermostatFanMode", value: mode, displayed: true)
	}
	if (state.switch=="on") {
		sendTasmota('IRhvac {"Vendor":"'+VENDOR+'", "Power":"On","Mode":"'+device.currentValue("thermostatMode")+'","FanSpeed":"'+FANMODE+'","Temp":"'+device.currentValue("coolingSetpoint")+'"}')
	}
}

//ate aqui

def sendTasmota(command) {
	def options = [
		method: "GET",
		headers: [HOST: settings.TasmotaIP+":80"],
		path: "/cm?user=" + (settings.username ?: "") + "&password=" + (settings.password ?: "") + "&cmnd=" + URLEncoder.encode(command, "UTF-8").replaceAll(/\+/,'%20')
	]
	log.debug options
	def hubAction = new hubitat.device.HubAction(options, null) //Alterei
	sendHubCommand(hubAction)
}

def getVENDOR() {
	return (settings.ACvendor ?: "SAMSUNG_AC")
}

def getFANMODE() {
	return (device.currentValue("thermostatFanMode") == "turbo" ? "max" : device.currentValue("thermostatFanMode"))
} 
