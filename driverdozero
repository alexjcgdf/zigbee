metadata {
    definition(name: "Driver do Zero", namespace: "jorge", author: "Jorge Palmeira") {
        capability "Switch"
        capability "Thermostat"
    }
}
preferences {
	input name: "TasmotaIP", title:"local IP address of Tasmota IR", type: "string", required: true
	input name: "username", title:"Username of Tasmota IR", type: "string"
	input name: "password", title:"Password of Tasmota IR", type: "string"
	input name: "ACvendor", title:"Vendor string of Air Conditioner", options: ["SAMSUNG_AC", "LG", "LG2", "COOLIX", "DAIKIN", "KELVINATOR", "MITSUBISHI_AC", "GREE", "ARGO", "TROTEC", "TOSHIBA_AC", "FUJITSU_AC", "MIDEA", "HAIER_AC", "HITACHI_AC", "HAIER_AC_YRW02", "WHIRLPOOL_AC", "ELECTRA_AC", "PANASONIC_AC", "DAIKIN2", "VESTEL_AC", "TECO", "TCL112AC", "MITSUBISHI_HEAVY_88", "MITSUBISHI_HEAVY_152", "DAIKIN216", "SHARP_AC", "GOODWEATHER", "DAIKIN160", "NEOCLIMA", "DAIKIN176", "DAIKIN128"], type: "enum", required: true, defaultValue: "SAMSUNG_AC"
	input name: "offThreshold", title:"Off Threshold Power (W)", type: "number", required: true, defaultValue: 3.9
	input name: "onThreshold", title:"On Threshold Power (W)", type: "number", required: true, defaultValue: 4
}

def parse(String description) {
}


def installed() {
    initialize()
}

def updated() {
    initialize()
}

def initialize() {

}

def on() {
    sendEvent(name: "switch", value: "on")
}

def off() {
    sendEvent(name: "switch", value: "off")
}
def cool() {
    sendEvent(name: "thermostatMode", value: "cool")
}

def heat() {
    sendEvent(name: "thermostatMode", value: "heat")
}

def auto() {
    sendEvent(name: "thermostatMode", value: "auto")
}

def emergencyHeat() {
    setThermostatMode("emergency heat")
}


def fanAuto() {
    sendEvent(name: "thermostatFanMode", value: "auto", displayed: true)
}

def fanCirculate() {
    sendEvent(name: "thermostatFanMode", value: "min", displayed: true)
}

def fanOn() {
    sendEvent(name: "thermostatFanMode", value: "max", displayed: true)
}

def sendTasmota(command) {
	def options = [
		method: "GET",
		headers: [HOST: settings.TasmotaIP+":80"],
		path: "/cm?user=" + (settings.username ?: "") + "&password=" + (settings.password ?: "") + "&cmnd=" + URLEncoder.encode(command, "UTF-8").replaceAll(/\+/,'%20')
	]
	log.debug options
	def hubAction = new hubitat.device.HubAction(options, null) //Alterei
	sendHubCommand(hubAction)
}

def getVENDOR() {
	return (settings.ACvendor ?: "SAMSUNG_AC")
}

def getFANMODE() {
	return (device.currentValue("thermostatFanMode") == "turbo" ? "max" : device.currentValue("thermostatFanMode"))
} 
