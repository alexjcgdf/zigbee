/**
 *  Tasmota IR Ventilador 0.0.1.1 (alpha preview)
 *	Copyright 2020 Jorge Palmeira
 *
 *	Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *	in compliance with the License. You may obtain a copy of the License at:
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *	on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *	for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
	definition (name: "Tasmota IR Ventilador", namespace: "jorgespneto", author: "Jorge Palmeira", ocfDeviceType: "oic.d.fan") { 
        capability "Switch Level"
        capability "Switch"
        capability "SwitchLevel"
	capability "FanControl"
        capability "Health Check"
        capability "Actuator"
        capability "Refresh"
        capability "Sensor"
        capability "Signal Strength"
        capability "Initialize" 

        attribute "lastSeen", "string"
        attribute "version", "string"

        command "low"
        command "medium"
        command "high"
        command "raiseFanSpeed"
        command "lowerFanSpeed"
	}

	fingerprint profileId: "0104", deviceId: "0051", inClusters: "0000 0003 0004 0006 0009 0702 0B04", outClusters: "0000 0003 0004 0006 0009 0702 0B04", manufacturer: "Heiman", model: "SmartPlug", deviceJoinName: "에어컨" // fingerprint of Heiman 16A plug

	preferences {
		input name: "TasmotaIP", title:"local IP address of Tasmota IR", type: "string", required: true
		input name: "username", title:"Username of Tasmota IR", type: "string"
		input name: "password", title:"Password of Tasmota IR", type: "string"
		input name: "offThreshold", title:"Off Threshold Power (W)", type: "number", required: true, defaultValue: 3.9
		input name: "onThreshold", title:"On Threshold Power (W)", type: "number", required: true, defaultValue: 4
	}

    tiles(scale: 2) {
        multiAttributeTile(name: "fanSpeed", type: "generic", width: 6, height: 4, canChangeIcon: true) {
            tileAttribute("device.fanSpeed", key: "PRIMARY_CONTROL") {
                attributeState "0", label: "off", action: "switch.on", icon: "st.thermostat.fan-off", backgroundColor: "#ffffff"
                attributeState "1", label: "low", action: "switch.off", icon: "st.thermostat.fan-on", backgroundColor: "#00a0dc"
                attributeState "2", label: "medium", action: "switch.off", icon: "st.thermostat.fan-on", backgroundColor: "#00a0dc"
                attributeState "3", label: "high", action: "switch.off", icon: "st.thermostat.fan-on", backgroundColor: "#00a0dc"
            }
            tileAttribute("device.fanSpeed", key: "VALUE_CONTROL") {
                attributeState "VALUE_UP", action: "raiseFanSpeed"
                attributeState "VALUE_DOWN", action: "lowerFanSpeed"
            }
        }

        standardTile("refresh", "device.switch", width: 2, height: 2, inactiveLabel: false, decoration: "flat") {
            state "default", label: '', action: "refresh.refresh", icon: "st.secondary.refresh"
        }

        standardTile("lqi", "device.lqi", width: 2, height: 2, inactiveLabel: false, decoration: "flat") {
            state "default", label: 'LQI: ${currentValue}'
        }

        standardTile("rssi", "device.rssi", width: 2, height: 2, inactiveLabel: false, decoration: "flat") {
            state "default", label: 'RSSI: ${currentValue}dBm'
        }

        main "fanSpeed"
        details(["fanSpeed", "refresh", "lqi", "rssi"])
    }
}

// Parse incoming device messages to generate events
def parse(String description) {
	log.debug "description is $description"
	def event = zigbee.getEvent(description)
	if (event) {
		if (event.name == "power") {
			def powerValue
			def div = device.getDataValue("divisor")
			div = div ? (div as int) : 10
			powerValue = (event.value as Integer)/div
			//sendEvent(name: "power", value: powerValue, displayed: false)
			processPower(powerValue)
		}
		else if (event.name == "switch") {
			log.debug "zigbee plug is turned "+event.value
			if (event.value == "off") {
				runIn(1, turnPlugOn)
			}
		}
		else {
			log.debug "sendEvent : " + event
			sendEvent(event)
		}
	}
	else {
		log.warn "DID NOT PARSE MESSAGE for description : $description"
		log.debug zigbee.parseDescriptionAsMap(description)
	}
}

def processPower(p) {
	def onThresholdVal = (onThreshold==null)? 4 : onThreshold
	def offThresholdVal = (offThreshold==null)? 3.9 : offThreshold

	log.debug "--processPower() : Power:{${p}} OnThreshold:{${onThresholdVal}} OffThreshold:{${offThresholdVal}}"

	if (p >= onThresholdVal && state.switch == "off") {
		log.debug "	switch off-->on"
		sendEvent(name: "switch", value: "on", displayed: true)
		state.switch="on"
		sendEvent(name: "airConditionerMode", value: "auto", displayed: true)
	}
	if (p <= offThresholdVal && state.switch == "on") {
		log.debug "	switch on-->off"
		sendEvent(name: "switch", value: "off", displayed: true)

		state.switch="off"
	}
}	

def off() {
	sendTasmota('{"Protocol":"NEC","Bits":32,"Data":"0x00FFA25D"}')
    sendEvent(name: "switch", value: "off", displayed: true)
}

def on() {
	sendTasmota('{"Protocol":"NEC","Bits":32,"Data":"0x00FFE01F"}')
    sendEvent(name: "switch", value: "on", displayed: true)
}

def setFanSpeed(speed) {
    if (speed as Integer == 0) {
        off()
    } else if (speed as Integer == 1) {
        low()
    } else if (speed as Integer == 2) {
        medium()
    } else if (speed as Integer == 3) {
        high()
    }
}

def raiseFanSpeed() {
    setFanSpeed(Math.min((device.currentValue("fanSpeed") as Integer) + 1, 3))
}

def lowerFanSpeed() {
    setFanSpeed(Math.max((device.currentValue("fanSpeed") as Integer) - 1, 0))
}

def low() {
	sendTasmota('{"Protocol":"NEC","Bits":32,"Data":"0X00FF906F"}')
  
  sendEvent(name: "FanSpeed", value: "low", displayed: true)
}

def medium() {
	sendTasmota('{"Protocol":"NEC","Bits":32,"Data":"0x00FFE01F"}')
  
  sendEvent(name: "FanSpeed", value: "medium", displayed: true)
}

def high() {
	sendTasmota('{"Protocol":"NEC","Bits":32,"Data":"0X00FFE21D"}')
  
  sendEvent(name: "FanSpeed", value: "high", displayed: true)
}

//


def refresh() {
	log.debug "refresh() called"
	Integer reportIntervalMinutes = 5
	def cmds = zigbee.onOffRefresh() + zigbee.simpleMeteringPowerRefresh() + zigbee.electricMeasurementPowerRefresh()
	if (device.getDataValue("manufacturer") == "Jasco Products") {
		// Some versions of hub firmware will incorrectly remove this binding causing manual control of switch to stop working
		// This needs to be the first binding table entry because the device will automatically write this entry each time it restarts
		cmds += ["zdo bind 0x${device.deviceNetworkId} 2 1 0x0006 {${device.zigbeeId}} {${device.zigbeeId}}", "delay 2000"]
	}
	if (device.getDataValue("divisor") == "1") {
		cmds += zigbee.onOffConfig(0, reportIntervalMinutes * 60) + zigbee.simpleMeteringPowerConfig(1, 600, 0x01) + zigbee.electricMeasurementPowerConfig(1, 600, 0x0001)
	} else {
		cmds += zigbee.onOffConfig(0, reportIntervalMinutes * 60) + zigbee.simpleMeteringPowerConfig() + zigbee.electricMeasurementPowerConfig()
	}
	log.debug cmds
	return cmds
}

def configure() {
	log.debug "in configure()"
	if ((device.getDataValue("manufacturer") == "Develco Products A/S") || (device.getDataValue("manufacturer") == "Aurora"))  {
		device.updateDataValue("divisor", "1")
	}
	if ((device.getDataValue("manufacturer") == "SALUS") || (device.getDataValue("manufacturer") == "DAWON_DNS"))  {
		device.updateDataValue("divisor", "1")
	}
	return configureHealthCheck()
}

def configureHealthCheck() {
	Integer hcIntervalMinutes = 12
	sendEvent(name: "checkInterval", value: hcIntervalMinutes * 60, displayed: false, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID])
	return refresh()
}

def installed() {
	log.debug "in installed()"
	state.switch="off"
	state.switch="on"
	sendEvent(name: "switch", value: "off", displayed: true)
	sendEvent(name: "switch", value: "on", displayed: true)
	sendEvent(name: "FanSpeed", value:["low", "medium", "high"])
}


def updated() {
	log.debug "in updated()"
	// updated() doesn't have it's return value processed as hub commands, so we have to send them explicitly
	def cmds = configure()
	cmds.each{ sendHubCommand(new hubitat.device.HubAction(it)) } //Alterei
}

def ping() {
	return zigbee.onOffRefresh() + zigbee.simpleMeteringPowerRefresh() + zigbee.electricMeasurementPowerRefresh()
}

def turnPlugOn() {
	log.debug "Automatically turning on the zigbee plug"
	def cmds = zigbee.on()
	cmds.each{ sendHubCommand(new hubitat.device.HubAction(it)) } //Alterei
}

def sendTasmota(command) {
	def options = [
		method: "GET",
		headers: [HOST: settings.TasmotaIP+":80"],
		path: "/cm?user=" + (settings.username ?: "") + "&password=" + (settings.password ?: "") + "&cmnd=" + URLEncoder.encode(command, "UTF-8").replaceAll(/\+/,'%20')
	]
	log.debug options
	def hubAction = new hubitat.device.HubAction(options, null) //Alterei
	sendHubCommand(hubAction)
}
