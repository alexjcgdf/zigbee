// Copyright 2020 Jorge Palmeira
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Changelog:


metadata {
    definition(
        name: "Tasmota IR Thermostat",
        namespace: "jorgepalmeira",
        author: "Jorge Palmeira",
    ) {
        capability "Actuator"
        capability "Sensor"
        capability "Switch"
        capability "SwitchLevel"
        capability "FanControl"
        capability "Initialize"
        capability "Thermostat"
		capability "Thermostat Heating Setpoint"
        capability "ThermostatCoolingSetpoint"
        capability "ThermostatSetpoint"
        capability "TemperatureMeasurement"
        capability "ThermostatMode"
	capability "ThermostatFanMode"

		command "heatUp"
		command "heatDown"
		command "coolUp"
		command "coolDown"
		command "setTemperature", ["number"]
		command "setThermostatThreshold", ["number"]
		command "setMinHeatTemp", ["number"]
		command "setMaxHeatTemp", ["number"]
		command "setMinCoolTemp", ["number"]
		command "setMaxCoolTemp", ["number"]
        	command "setMaxUpdateInterval", ["number"]

		attribute "thermostatThreshold", "number"
		attribute "minHeatTemp", "number"
		attribute "maxHeatTemp", "number"
		attribute "minCoolTemp", "number"
		attribute "maxCoolTemp", "number"
        attribute "lastTempUpdate", "date"
        attribute "maxUpdateInterval", "number"
        attribute "preEmergencyMode", "string"
        attribute "thermostatOperatingState", "string"
	attribute thermostatFanMode - ENUM ["auto", "circulate", "on"]
	attribute thermostatFanMode - ENUM ["on", "circulate", "auto"]
	attribute thermostatMode - ENUM ["auto", "off", "heat", "emergency heat", "cool"]
	attribute thermostatOperatingState - ENUM ["heating", "pending cool", "pending heat", "vent economizer", "idle", "cooling", "fan only"]

	}

}

def installed() {
	sendEvent(name: "minCoolTemp", value: 16, unit: "C")
	sendEvent(name: "maxCoolTemp", value: 30, unit: "C")
	sendEvent(name: "maxHeatTemp", value: 30, unit: "C")
	sendEvent(name: "minHeatTemp", value: 16, unit: "C")
	sendEvent(name: "thermostatThreshold", value: 1.0, unit: "F")
	sendEvent(name: "temperature", value: 20, unit: "C")
	sendEvent(name: "heatingSetpoint", value: 26, unit: "C")
	sendEvent(name: "thermostatSetpoint", value: 20, unit: "C")
	sendEvent(name: "coolingSetpoint", value: 20, unit: "C")
	sendEvent(name: "thermostatMode", value: "off")
	sendEvent(name: "thermostatMode", value: "cool")
	sendEvent(name: "thermostatOperatingState", value: "idle")
	sendEvent(name: "switch", value: "on")
	sendEvent(name: "switch", value: "off")
    sendEvent(name: "maxUpdateInterval", value: 65)
    sendEvent(name: "lastTempUpdate", value: new Date() )
}

def updated() {
	sendEvent(name: "minCoolTemp", value: 16, unit: "C")
	sendEvent(name: "maxCoolTemp", value: 30, unit: "C")
	sendEvent(name: "maxHeatTemp", value: 16, unit: "C")
	sendEvent(name: "minHeatTemp", value: 30, unit: "C")
    sendEvent(name: "maxUpdateInterval", value: 65)
    sendEvent(name: "lastTempUpdate", value: new Date() )
}

def parse(String description) {
}

// def installed() {
//     initialize()
// }

// def updated() {
//     initialize()
// }

// def initialize() {
//     sendEvent(name: "supportedThermostatModes", value: ["off", "cool"])
//  if (device.currentThermostatMode == null) {
//         setThermostatMode("cool")
//     }
// //     if (device.currentThermostatSetpoint == null) {
//         setCoolingSetpoint(78)
//     }
// }

// def parse(command) {
//     def parts = command.split(" ")
//     def attr = parts[0]
//     def value = parts[1]

//     if (attr == "speed") {
//         if (value == "off") {
//             state.lastSpeed = device.currentSpeed
//             sendEvent(name: "switch", value: "off")
//         } else {
//             if (value == "on" && state.lastSpeed && state.lastSpeed != "off") {
//                 value = state.lastSpeed
//             }
//             sendEvent(name: "switch", value: "on")
//         }
//     }
//     sendEvent(name: attr, value: value)
// }

def on() {
    sendEvent(name: "switch", value: "on")
}

def off() {
    sendEvent(name: "switch", value: "off")
}

def setSpeed(speed) {
    parent.setSpeed(speed)
}

def setLevel(level) {
    if (level < 0) {
        level = 0;
    } else if (level > 99) {
        level = 99
    }
    parent.setLevel(level)
}

def setCoolingSetpoint(temperature) {
    sendEvent(name: "thermostatSetpoint", value: temperature)
    sendEvent(name: "coolingSetpoint", value: temperature)
}

def clearManualOverride() {
    unschedule("clearManualOverride")
    sendEvent(name: "manualOverride", value: "inactive")
}

def setManualOverride(overrideSeconds=null) {
    if (overrideSeconds == null) {
        overrideSeconds = device.currentDefaultManualOverrideTime
    }
    if (overrideSeconds) {
        sendEvent(name: "manualOverride", value: "active")
        runIn(overrideSeconds.toLong(), "clearManualOverride")
    }
}

def setThermostatMode(mode) {
    sendEvent(
        name: "thermostatMode",
        value: mode == "off" ? "off" : "cool"
    )
}

def cool() {
    setThermostatMode("cool")
}

// These are just here to fulfill the contract for the ThermostatMode capability
// These modes aren't actually supported, nor do them make sense for this device
def auto() {
    setThermostatMode("cool")
}

def heat() {
    setThermostatMode("cool")
}

def emergencyHeat() {
    setThermostatMode("cool")
}
